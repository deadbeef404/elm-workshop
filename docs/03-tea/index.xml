<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Elm Architecture on Elm Workshop</title>
    <link>http://example.org/03-tea.html</link>
    <description>Recent content in The Elm Architecture on Elm Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/03-tea/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Elm Architecture</title>
      <link>http://example.org/03-tea/01-intro.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/01-intro.html</guid>
      <description>Most Elm applications are built using a pattern called The Elm Architecture (TEA). If you have used Redux, this architecture will be very familiar. This is not a coincidence &amp;ndash; Redux was heavily inspired by Elm!
This is the Elm architecture:
 ➊ When our application first starts, we have an initial model that is passed to our program’s view function. ➋ The view function renders the current model to produce our program’s user interface (typically as HTML).</description>
    </item>
    
    <item>
      <title>Structure</title>
      <link>http://example.org/03-tea/02-structure.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/02-structure.html</guid>
      <description>Here is a basic application using the Elm architecture.
module Main exposing (..) import Html exposing (Html, div, text) -- MODEL type alias Model = String init : ( Model, Cmd Msg ) init = ( &amp;quot;Hello&amp;quot;, Cmd.none ) -- MESSAGES type Msg = NoOp -- VIEW view : Model -&amp;gt; Html Msg view model = div [] [ text model ] -- UPDATE update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg ) update msg model = ( model, Cmd.</description>
    </item>
    
    <item>
      <title>TEA Breakdown</title>
      <link>http://example.org/03-tea/03-breakdown.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/03-breakdown.html</guid>
      <description>Application Model type alias Model = String  Here we define what our application’s model will look like. In this case, we are aliasing the built-in String type. So our whole application’s model is simply a string.
Our application’s model can be any type of value supported by Elm, including:
 a record (effectively a JSON object with a fixed set of fields) a list (what we call an array in JavaScript) a number a boolean (true or false) a tuple (a fixed-length list of values of specific types) a union type (more on this later)  Initial model init : ( Model, Cmd Msg ) init = ( &amp;quot;Hello&amp;quot;, Cmd.</description>
    </item>
    
    <item>
      <title>Messages</title>
      <link>http://example.org/03-tea/04-breakdown-messages.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/04-breakdown-messages.html</guid>
      <description>The next part are the messages in our application:
type Msg = NoOp  We have only listed one message that our program can receive, which we’ve named NoOp (meaning “no operation”). Our program doesn’t yet have any features that would require responding to a message, so we’re just providing a dummy message here as a placeholder.
A type declaration defines a union type in Elm (also known as an algebraic data type , or ADT).</description>
    </item>
    
    <item>
      <title>View</title>
      <link>http://example.org/03-tea/05-breakdown-view.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/05-breakdown-view.html</guid>
      <description>The next part is the view function:
view : Model -&amp;gt; Html Msg view model = div [] [ text model ]  This is a function that takes a Model argument and returns Html.
If you’re curious, here’s a little explanation about Html Msg. Elm’s Html type takes an argument that indicates the type of messages the user interface will generate. In this example, we pass it Msg to indicate that the Html that our view returns will only ever emit the messages specified by our program’s Msg type.</description>
    </item>
    
    <item>
      <title>Update</title>
      <link>http://example.org/03-tea/06-breakdown-update.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/06-breakdown-update.html</guid>
      <description>The next part is the update function, which is equivalent to a reducer in Redux:
update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg ) update msg model = ( model, Cmd.none )  This function is responsible for updating your program’s model in response to the messages it receives; the Elm Runtime calls it automatically when it receives a message. This function takes two arguments: the incoming message (which will be a value of the Msg type we defined above), and the current model.</description>
    </item>
    
    <item>
      <title>Program</title>
      <link>http://example.org/03-tea/07-breakdown-main.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/07-breakdown-main.html</guid>
      <description>Lastly we have:
-- SUBSCRIPTIONS subscriptions model = Sub.none -- MAIN main = Html.program { init = init , view = view , update = update , subscriptions = subscriptions }  Subscriptions Subscriptions is how Elm programs listen for external events, for example:
 Mouse movement Window resizing Time increments Animation frames Messages from JavaScript code  The subscriptions function takes the program’s current model as an argument, and returns a list of the subscriptions we wish to receive messages from.</description>
    </item>
    
    <item>
      <title>Exercise</title>
      <link>http://example.org/03-tea/08-exercise.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/03-tea/08-exercise.html</guid>
      <description>The program we just wrote is structured according to TEA (The Elm Architecture), which should make it easy to extend. To begin, we might alter the representation of our model so that it can store more than just a single string.
Instead, let&amp;rsquo;s use a record. Much like a JSON object, Elm records store values for a number of keys. Let’s move our model’s string into a record key, so that we can later add more keys with other values as needed.</description>
    </item>
    
  </channel>
</rss>